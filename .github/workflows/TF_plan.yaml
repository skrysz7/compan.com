name: "Terraform Plan"

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "compan"
  TF_API_TOKEN: "${{ secrets.TFE_TOKEN }}"
  TF_WORKSPACE: "compan-workspace"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # # Add a delay to allow Terraform Cloud some time to generate the plan
      - name: Wait for Plan Generation
        run: sleep 60s
      # Step to fetch the latest plan ID from Terraform Cloud
      - name: Get Latest Plan ID
        id: latest-plan
        run: |
          latest_plan_id=$(curl -s -X GET \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            "https://app.terraform.io/api/v2/workspaces/$TF_WORKSPACE/current-run" | jq -r .data.id)
          echo "Latest Plan ID: $latest_plan_id"
          echo "::set-output name=plan_id::$latest_plan_id"

      
      # # Add a delay to allow Terraform Cloud some time to generate the plan
      # - name: Wait for Plan Generation
      #   run: sleep 60s

      # # Step to fetch the plan from Terraform Cloud using the latest plan ID
      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ws-G9otvMFBeVzEVAnG
      #     organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      #     workspace: ${{ env.TF_WORKSPACE }}

      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });
