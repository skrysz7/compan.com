name: "Terraform Plan"

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "compan"
  TF_API_TOKEN: "${{ secrets.TFE_TOKEN }}"
  TF_WORKSPACE: "compan-workspace"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get latest Terraform run ID
        id: get-run-id
        run: |
          # Set your Terraform Cloud organization and workspace
          ORG_NAME="compan"
          WORKSPACE_NAME="compan-workspace"
        
          # Fetch the workspace ID
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/organizations/${ORG_NAME}/workspaces/${WORKSPACE_NAME} | jq -r '.data.id')
          
          echo "Workspace ID: $WORKSPACE_ID"
          
          if [ "$WORKSPACE_ID" == "null" ]; then
            echo "Failed to fetch Workspace ID"
            exit 1
          fi
          
          # Fetch the latest run ID for the workspace
          LATEST_RUN_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/workspaces/${WORKSPACE_ID}/runs | jq -r '.data[0].id')
          
          echo "Latest Run ID: $LATEST_RUN_ID"
          
          if [ "$LATEST_RUN_ID" == "null" ]; then
            echo "Failed to fetch Latest Run ID"
            exit 1
          fi

      # - name: Get latest Terraform run ID
      #   id: get-run-id
      #   run: |         
      #     echo "yo yo"
      #     #WP=$(curl https://wp.pl)
      #     #echo "WP: $WP"
      #     LATEST_RUN_ID=$(curl -s --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" https://app.terraform.io/api/v2/organizations/compan/workspaces/compan-workspace | jq -r '.data.relationships["latest-run"].data.id')
      #     echo "LATEST_RUN_ID: $LATEST_RUN_ID"

          
      #     # Fetch the latest run ID for the workspace
      #     LATEST_RUN_ID=$(curl -s \
      #       --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
      #       https://app.terraform.io/api/v2/workspaces/${WORKSPACE_ID}/runs | jq -r '.data[0].id')
          
      #     echo "Latest Run ID: $LATEST_RUN_ID"
          
      #     # Set the output for the next steps
      #     echo "::set-output name=run_id::$LATEST_RUN_ID"
        
      # - name: Use latest run ID
      #   run: echo "The latest run ID is ${{ steps.get-run-id.outputs.run_id }}"
      # # Add a delay to allow Terraform Cloud some time to generate the plan
      # - name: Wait for Plan Generation
      #   run: sleep 60s
      # Step to fetch the latest plan ID from Terraform Cloud
      # - name: Get Latest Plan ID
      #   id: latest-plan
      #   run: |
      #     latest_plan_id=$(curl -s -X GET \
      #       -H "Authorization: Bearer $TF_API_TOKEN" \
      #       "https://app.terraform.io/api/v2/workspaces/$TF_WORKSPACE/current-run" | jq -r .data.id)
      #     echo "Latest Plan ID: $latest_plan_id"
      #     echo "::set-output name=plan_id::$latest_plan_id"
  
      # - name: Get Latest Run
      #   run: |
      #     # This command retrieves the details of the latest run
      #     run_details=$(curl -s -H "Authorization: Bearer ${{ secrets.TFC_API_TOKEN }}" https://app.terraform.io/api/v2/organizations/${{ secrets.TF_CLOUD_ORGANIZATION }}/runs?filter=workspace-name=${{ secrets.TF_WORKSPACE }}&sort=-created_at&limit=1)
      #     echo "::debug:: Run Details: $run_details"
    
      #     # Extract the plan ID from the retrieved JSON using jq (assuming it's installed)
      #     plan_id=$(echo $run_details | jq -r '.data[0].relationships.plan.data.id')
      #     echo "Latest Plan ID: $plan_id"
    
      # Use the plan_id variable in subsequent steps...

      
      # # Add a delay to allow Terraform Cloud some time to generate the plan
      # - name: Wait for Plan Generation
      #   run: sleep 60s

      # # Step to fetch the plan from Terraform Cloud using the latest plan ID
      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ws-G9otvMFBeVzEVAnG
      #     organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      #     workspace: ${{ env.TF_WORKSPACE }}

      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Run Output
      #   uses: hashicorp/tfc-workflows-github/actions/show-run@v1.0.0
      #   id: run-output
      #   with:
      #     run: run-b4YdUo1w5onwpWDo
          
      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: plan-LjZRnADBridcNP2R

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });
