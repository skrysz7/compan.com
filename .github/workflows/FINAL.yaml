name: Final

on:
  workflow_dispatch: {}
  
env:
  TF_CLOUD_ORGANIZATION: "compan"
  TF_API_TOKEN: "${{ secrets.TFE_TOKEN }}"
  TF_WORKSPACE: "compan-workspace"
  CONFIG_DIRECTORY: "./"
  
jobs:
  check-rollback:
    runs-on: ubuntu-latest
    outputs:
      rollback: ${{ steps.check_rollback.outputs.rollback }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        shell: bash

      - name: Check for Rollback keyword
        id: check_rollback
        run: |
          if echo "$COMMIT_MESSAGE" | grep -q "Rollback"; then
            echo "Rollback keyword found in commit message."
            echo "::set-output name=rollback::true"
          else
            echo "No Rollback keyword found in commit message."
            echo "::set-output name=rollback::false"
          fi
        shell: bash

  next-job:
    needs: check-rollback
    runs-on: ubuntu-latest
    steps:
      - name: Determine action based on Rollback keyword
        run: |
          if [ "${{ needs.check-rollback.outputs.rollback }}" == "true" ]; then
            echo "Rollback keyword found. Skipping to next appropriate steps."
            # Add steps to handle the rollback scenario here
          else
            echo "No Rollback keyword found. Proceeding with normal steps."
            # Add normal steps here
          fi
          
  create_pr:
    runs-on: ubuntu-latest
    outputs:
     LATEST_RUN_ID: ${{ steps.get-run-id.outputs.LATEST_RUN_ID }}

    steps:
      - name: Checkout pre-release branch
        uses: actions/checkout@v3
        with:
          ref: pre-release

      - name: Fetch main branch
        run: git fetch origin main

      - name: Check for differences
        run: |
          if git diff --exit-code origin/main; then
            echo "No changes detected"
            exit 0
          else
            echo "Changes detected"
          fi

      - name: Create pull request
        run: gh pr create -B main -H pre-release --title 'Merge pre-release into main' --body 'Created by Github action'
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Wait 20 seconds
        run: sleep 20

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Merge pull request
        run: gh pr merge --merge --auto --subject 'Merge pre-release into main' --body 'Auto-merged by GitHub Action'
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Wait 20 seconds
        run: sleep 20

      - name: Get latest Terraform run ID
        id: get-run-id
        run: |
          # Set your Terraform Cloud organization and workspace
          ORG_NAME="compan"
          WORKSPACE_NAME="compan-workspace"
          
          # Fetch the workspace ID
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/organizations/${ORG_NAME}/workspaces/${WORKSPACE_NAME} | jq -r '.data.id')
          
          echo "Workspace ID: $WORKSPACE_ID"
          
          if [ "$WORKSPACE_ID" == "null" ]; then
            echo "Failed to fetch Workspace ID"
            exit 1
          fi
          
          # Fetch the latest run ID for the workspace
          LATEST_RUN_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/workspaces/${WORKSPACE_ID}/runs | jq -r '.data[0].id')
          
          echo "Latest Run ID: $LATEST_RUN_ID"
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
          
          if [ "$LATEST_RUN_ID" == "null" ]; then
            echo "Failed to fetch Latest Run ID"
            exit 1
          fi
      
          # Initialize plan status
          PLAN_STATUS=""
      
          # Loop to wait until the plan status is "planned"
          while [ "$PLAN_STATUS" != "planned" ]; do
            # Fetch the plan status for the latest run
            PLAN_STATUS=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
              https://app.terraform.io/api/v2/runs/${LATEST_RUN_ID} | jq -r '.data.attributes.status')
          
            echo "Plan Status: $PLAN_STATUS"
          
            if [ "$PLAN_STATUS" == "null" ]; then
              echo "Failed to fetch Plan Status"
              exit 1
            fi

            if [ "$PLAN_STATUS" == "planned_and_finished" ]; then
              echo "No changes to apply"
              exit 1
            fi
            
            if [ "$PLAN_STATUS" != "planned" ]; then
              echo "Plan not yet finished. Waiting for 30 seconds..."
              sleep 30
            fi
          done
          
          # Set the output for the next steps
          echo "::set-output name=plan_status::$PLAN_STATUS"
          # Set the LATEST_RUN_ID output for the next steps
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
          #echo "::set-output name=latest_run_id::$LATEST_RUN_ID"
      
      - name: Use latest plan status
        run: echo "The latest plan status is ${{ steps.get-run-id.outputs.plan_status }}"

        
  approval:
    needs: create_pr
    runs-on: ubuntu-latest
    environment: apply
    steps:
      - name: Apply Terraform changes
        run: |
          # Assuming you have the latest run ID stored in a variable
          LATEST_RUN_ID="${{ needs.create_pr.outputs.LATEST_RUN_ID }}"
          echo "Latest Run ID: $LATEST_RUN_ID"
      
          # Apply the Terraform changes using the Terraform Cloud API
          curl --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
               --header "Content-Type: application/vnd.api+json" \
               --request POST \
               --data "{}" \
               https://app.terraform.io/api/v2/runs/$LATEST_RUN_ID/actions/apply   
      
        timeout-minutes: 60
