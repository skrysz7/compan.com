name: APPLY

on:
  workflow_dispatch: {}
  
env:
  TF_CLOUD_ORGANIZATION: "compan"
  TF_API_TOKEN: "${{ secrets.TFE_TOKEN }}"
  TF_WORKSPACE: "compan-workspace"
  CONFIG_DIRECTORY: "./"
  
jobs:
 create_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Get latest Terraform run ID
        id: get-run-id
        run: |
          # Set your Terraform Cloud organization and workspace
          ORG_NAME="compan"
          WORKSPACE_NAME="compan-workspace"
          
          # Fetch the workspace ID
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/organizations/${ORG_NAME}/workspaces/${WORKSPACE_NAME} | jq -r '.data.id')
          
          echo "Workspace ID: $WORKSPACE_ID"
          
          if [ "$WORKSPACE_ID" == "null" ]; then
            echo "Failed to fetch Workspace ID"
            exit 1
          fi
          
          # Fetch the latest run ID for the workspace
          LATEST_RUN_ID=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            https://app.terraform.io/api/v2/workspaces/${WORKSPACE_ID}/runs | jq -r '.data[0].id')
          
          echo "Latest Run ID: $LATEST_RUN_ID"
    outputs:
     LATEST_RUN_ID: ${{ steps.get-run-id.outputs.LATEST_RUN_ID }}
 approval:
    runs-on: ubuntu-latest
    env:
      LATEST_RUN_ID: ${{ needs.create_pr.outputs.LATEST_RUN_ID }}
    steps:
      - name: Apply Terraform changes
        run: |
          # Assuming you have the latest run ID stored in a variable
          echo "Latest Run ID: $LATEST_RUN_ID"
      
          # Apply the Terraform changes using the Terraform Cloud API
          curl --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
               --header "Content-Type: application/vnd.api+json" \
               --request POST \
               --data "{}" \
               https://app.terraform.io/api/v2/runs/${LATEST_RUN_ID}/actions/apply   
      
        timeout-minutes: 60
